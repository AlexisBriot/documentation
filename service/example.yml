
# MESG service definition version
version: 0
# name of the service
name: "Ethereum Blockchain"
requirements:
  memory: 1024M  # Memory RAM to run the service
  cpu: 2  # Number of CPU required to run the service
  disk: 50G  # Disk space to reserve for this service
# Visibility of the service
visibility: ALL | USERS | WORKERS | NONE
# What need to be published
publish: ALL | SOURCE | CONTAINER | NONE
# List of events that will be emitted from the worker
events:
  transaction:
    title: "On new transaction"
    description: "Listen to every new transactions on the Ethereum blockchain"
    fees: # TODO here or in task
      developer: 1 MESG
      emitters: 1 MESG
    data: # data sent with the event
      hash:
        description: "hash ot the transaction"
        type: String
      timestamp:
        description: "timestamp ot the transaction"
        type: Number
      from:
        type: String
      to:
        type: String
      value:
        type: Number
# tasks that the service can execute from the application
tasks:
  transaction: # name of the command
    title: "Create and send a transaction"
    description: "This will create and send a transaction on the Ethereum network"
    payable: true # Mark this task as payable, workflows will be able to send some MESG through this transaction
    verifiable: true # This task can be executed as a decentralized task
    fees: # Fee to pay in order to execute this task
      developer: 1 MESG
      validator: 1 MESG
      executor: 10 MESG
    inputs: # arguments that the command can accept
      from:
        name: "Sender"
        description: "The address that send the transaction"
        type: String
      to:
        name: "Receiver"
        type: String
      amount:
        type: Number
        optional: true
    secrets:
      PRIVATE_KEY:
        description: "The address that will be used to sign the transaction"
        type: String
    outputs: # events that this command will trigger
      transactionResult:
        description: "Transaction succeed"
        data:
          txHash:
            type: String
      failure:
        description: "Transaction failed"
        data:
          error:
            type: String
  methodX:
    fee: 5 MESG
    verifiable: false # This task cannot be run as a decentralized task
    fees:
      developer: 0.1 MESG
      executor: 1 MESG
    inputs:
      from:
        type: String
      contractAddress:
        type: String
      contractArguments:
        type: JSON
      amount:
        type: Number
        description: "Default value is 42"
        optional: true
    outputs:
      methodResult:
        data: 
          txHash:
            type: String
            optional: true
# services needed to run the service with all dependencies (docker-compose format)
dependencies:
  app:
    image: ./ # Replace by the docker image hash when deployed
  ethereumNode:
    image: parity
    volumes:
      - "/root/.local/share/io.parity.ethereum" # /!\ Will be bind a folder on the host machine
    ports:
      - 8546 # /!\ Will be bind to random exterior port
      - 30303